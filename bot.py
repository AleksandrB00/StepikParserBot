from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from telethon.sync import TelegramClient
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch
from telethon.tl.functions.users import GetUsersRequest
import telethon

import logging
import glob
from datetime import datetime, timedelta, timezone

from settings import bot_settings
from bot_menu import menu
from database import orm


logging.basicConfig(
    level=logging.INFO,
    filename = "botlog.log",
    filemode='a',
    format = "%(asctime)s - %(module)s - %(levelname)s - %(funcName)s: %(lineno)d - %(message)s",
    datefmt='%H:%M:%S',
    )

client = TelegramClient(bot_settings.SESSION_NAME, bot_settings.API_ID, bot_settings.API_HASH)
client.start()

bot = Bot(token=bot_settings.BOT_TOKEN)
storage = MemoryStorage() 
dp = Dispatcher(bot, storage=storage)

'''–°–æ—Å—Ç–æ—è–Ω–∏—è'''

class ChatOpenLink(StatesGroup):
    waiting_link = State()

class ParsingActive(StatesGroup):
    waiting_link = State()
    last_activity = State()

class ParsingPhones(StatesGroup):
    waiting_link = State()

'''–ö–æ–º–∞–Ω–¥—ã'''

async def set_default_commands(dp):
    await dp.bot.set_my_commands(
        [
            types.BotCommand('start', '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        ]
    )

'''–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'''

@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    text = f'–ü—Ä–∏–≤–µ—Ç *{message.from_user.first_name}*!\n–í–∞—à ID: {message.from_user.id}\n–Ø –º–æ–≥—É —Å–ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–π —á–∞—Ç\n–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
    inline_markup = await menu.main_menu()
    response = orm.add_user(message.from_user.id, message.from_user.username)
    inline_markup = await menu.main_menu()
    username = message.from_user.username
    if response == 1:
        users = orm.get_admins()
        for user in users:
                if message.from_user.username == None:
                    await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{message.from_user.first_name}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')
                elif message.from_user.username != None:
                    await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML')
                else:
                   await bot.send_message(user.tg_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">@{username}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', parse_mode='HTML') 
    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    await set_default_commands(dp)

'''–í—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é'''

@dp.callback_query_handler(lambda call: 'main_menu' in call.data)
async def get_main_menu(callback_query: types.CallbackQuery):
    text = f'–ü—Ä–∏–≤–µ—Ç *{callback_query.from_user.first_name}*!\n–í–∞—à ID: {callback_query.from_user.id}\n–Ø –º–æ–≥—É —Å–ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–π —á–∞—Ç\n–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
    inline_markup = await menu.main_menu()
    await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')

'''–í—ã–∑–æ–≤ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é'''

@dp.callback_query_handler(lambda call: 'premium_menu' in call.data)
async def get_premium_menu(callback_query: types.CallbackQuery):
    if orm.check_premium(callback_query.from_user.id) == 1:
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞'
        inline_markup = await menu.premium_parsing_menu()
        await callback_query.message.edit_text(text, reply_markup=inline_markup, parse_mode='Markdown')
    else:
        text = '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
        await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')

'''–ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞'''

@dp.callback_query_handler(lambda call: 'parsing_open_start' in call.data)
async def parsing_open_start(callback_query: types.CallbackQuery):
    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *t.m–µ/dur–æv* –∏–ª–∏ *@dur–æv*'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
    await ChatOpenLink.waiting_link.set()

'''–ö–Ω–æ–ø–∫–∞ –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è'''

@dp.callback_query_handler(lambda call: 'parsing_activity' in call.data)
async def parsing_activity_start(callback_query: types.CallbackQuery):
    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
    await ParsingActive.waiting_link.set()

'''–ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'''

@dp.message_handler(state=ParsingActive.waiting_link)
async def get_filter_activity(message: types.Message, state: FSMContext):
    await state.update_data(waiting_link=message.text)
    inline_markup = await menu.last_active_menu()
    text = '–ó–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –±—ã—Ç—å –æ–Ω–ª–∞–π–Ω?'
    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')
    await ParsingActive.last_activity.set()

'''–ö–Ω–æ–ø–∫–∞ –º–æ–±. —Ç–µ–ª–µ—Ñ–æ–Ω—ã'''

@dp.callback_query_handler(lambda call: 'phones' in call.data)
async def parsing_phones(callback_query: types.CallbackQuery):
    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç'
    await bot.send_message(callback_query.from_user.id, text, parse_mode='Markdown')
    await ParsingPhones.waiting_link.set()

'''–ü—Ä–∞—Å–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞'''

@dp.message_handler(state=ChatOpenLink.waiting_link)
async def get_open_report(message: types.Message, state: FSMContext):
    await state.update_data(waiting_link=message.text)
    state_data = await state.get_data()
    link = state_data.get('waiting_link')
    channel = await client.get_entity(link)
    await bot.send_message(message.chat.id, text='–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 10 –¥–æ 15 –º–∏–Ω—É—Ç‚è±')
    upload_message = await bot.send_message(message.chat.id, text='–ò–¥—ë—Ç –ø–∞—Ä—Å–∏–Ω–≥: 0% [..........]')
    ALL_PARTICIPANTS = []
    for key in bot_settings.QUERY:
        progress = (bot_settings.QUERY.index(key)+1)*100/len(bot_settings.QUERY)
        completion_percentage = float('{:.2f}'.format(progress))
        await upload_message.edit_text(text=f'–ò–¥—ë—Ç –ø–∞—Ä—Å–∏–Ω–≥: {completion_percentage}% [{"*"*(int(progress)//10)}{"."*(10-int(progress)//10)}]')
        OFFSET_USER = 0
        while True:
            participants = await client(GetParticipantsRequest(channel, ChannelParticipantsSearch(key), OFFSET_USER, bot_settings.LIMIT_USER, hash=0))
            if not participants.users:
                break
            ALL_PARTICIPANTS.extend(participants.users)
            OFFSET_USER += len(participants.users)
    target = '*.txt'
    file = glob.glob(target)[0] 
    with open(file, "w", encoding="utf-8") as write_file:
        for participant in ALL_PARTICIPANTS[0:100]:
            if participant.username != None and participant.bot == False and participant.fake == False:
                write_file.writelines(f"@{participant.username}\n")
    uniqlines = set(open(file,'r', encoding='utf-8').readlines())
    open(file,'w', encoding='utf-8').writelines(set(uniqlines))
    await state.finish()
    text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
    inline_markup = await menu.main_menu()
    await message.reply_document(open(file, 'rb'))
    await message.answer(text, reply_markup=inline_markup, parse_mode='Markdown')

'''–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'''

@dp.callback_query_handler(state=ParsingActive.last_activity)
async def parsing_activity_start(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(last_activity=callback_query.data)
    state_data = await state.get_data()
    link = state_data.get('waiting_link')
    online = state_data.get('last_activity').split('_')[1]
    hours = int(online)
    await bot.send_message(callback_query.from_user.id, text='–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 10 –¥–æ 15 –º–∏–Ω—É—Ç‚è±', parse_mode='Markdown')
    upload_message = await bot.send_message(callback_query.from_user.id, text='–ò–¥—ë—Ç –ø–∞—Ä—Å–∏–Ω–≥: 0% [..........]')
    current_time_utc =  datetime.now(timezone.utc)
    target_time = current_time_utc - timedelta(hours=hours, minutes=0)
    id_list = []
    ALL_PARTICIPANTS = []
    channel = await client.get_entity(link)
    test = await client(GetUsersRequest([5761263022]))
    for key in bot_settings.QUERY:
        progress = (bot_settings.QUERY.index(key)+1)*100/len(bot_settings.QUERY)
        completion_percentage = float('{:.2f}'.format(progress))
        await upload_message.edit_text(text=f'–ò–¥—ë—Ç –ø–∞—Ä—Å–∏–Ω–≥: {completion_percentage}% [{"*"*(int(progress)//10)}{"."*(10-int(progress)//10)}]')
        OFFSET_USER = 0
        while True:
            participants = await client(GetParticipantsRequest(channel, ChannelParticipantsSearch(key), OFFSET_USER, bot_settings.LIMIT_USER, hash=0))
            if not participants.users:
                break
            ALL_PARTICIPANTS.extend(participants.users)
            OFFSET_USER += len(participants.users)
    for user in ALL_PARTICIPANTS:
        id_list.append(user.id)
    OFFSET_USER = 0
    users_list = []
    while True:
        users = await client(GetUsersRequest(id_list[OFFSET_USER:]))
        if len(users) == 0:
            break
        users_list.extend(users)
        OFFSET_USER += len(users)
    finish_list = []
    for user in users_list:
        if user.status.__class__ == telethon.tl.types.UserStatusRecently:
            finish_list.append(user)
            continue
        if user.status.__class__ == telethon.tl.types.UserStatusOnline:
            finish_list.append(user)
            continue
        if user.status.__class__ == telethon.tl.types.UserStatusLastWeek and hours == 168:
            finish_list.append(user)
            continue
        if hasattr(user.status, 'was_online'):
            if user.status.was_online > target_time:
                finish_list.append(user)
            if user.status.was_online < target_time:
                continue
    target = '*.txt'
    file = glob.glob(target)[0] 
    with open(file, "w", encoding="utf-8") as write_file:
        for participant in finish_list:
            if participant.username != None and participant.bot == False and participant.fake == False:
                write_file.writelines(f"@{participant.username}\n")
    uniqlines = set(open(file,'r', encoding='utf-8').readlines())
    open(file,'w', encoding='utf-8').writelines(set(uniqlines))
    await state.finish()
    text = '–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µüëá'
    inline_markup = await menu.main_menu()
    await bot.send_document(callback_query.from_user.id, open(file, 'rb'))
    await bot.send_message(callback_query.from_user.id, text, reply_markup=inline_markup)
    
                                             

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    